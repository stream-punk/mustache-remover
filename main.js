/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MustacheRemover
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var title = /{\s+(.*?)\s+}/;
var tag = "\u{1F3F7}\uFE0F";
var clock = "\u{1F55B}";
var MustacheRemover = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.remover = async (element, context) => {
      await this.header_remover(element, context);
      await this.mustache_remover(element, context);
      await this.curl_adder(element, context);
    };
    this.header_remover = async (element, context) => {
      const is_dynbedded = element.classList.contains("dynbedded");
      var is_embedded = false;
      if (!is_dynbedded) {
        var parent = context.containerEl;
        while (parent) {
          const class_list = parent.classList;
          if (!is_embedded && class_list.contains("markdown-embed")) {
            is_embedded = true;
          }
          if (is_embedded && class_list.contains("popover")) {
            if (class_list.contains("hover-popover")) {
              is_embedded = false;
            }
          }
          parent = parent.parentElement;
        }
      }
      if (is_dynbedded || is_embedded) {
        const paragraphs = element.querySelectorAll("div p");
        if (paragraphs.length) {
          const paragraph = paragraphs[0];
          const text = paragraph.innerText;
          if (text.contains(tag)) {
            const br = paragraph.querySelectorAll("br");
            const wbr = paragraph.querySelectorAll("wbr");
            if (br.length && wbr.length && text.contains(clock)) {
              paragraph.remove();
            }
          }
        }
      }
    };
    this.curl_adder = async (element, context) => {
      const wbrs = element.querySelectorAll("wbr");
      for (const wbr of wbrs) {
        for (const cls of wbr.classList) {
          element.classList.add(cls);
        }
      }
    };
    this.mustache_remover = async (element, context) => {
      const anchors = element.querySelectorAll("a");
      for (const anchor of anchors) {
        if (anchor.classList.contains("internal-link")) {
          const text = anchor.innerText;
          if (text == anchor.innerHTML) {
            const match = text.match(title);
            if (match && match.length > 1) {
              anchor.innerText = match[1];
            }
          }
        }
      }
    };
  }
  async onload() {
    this.registerMarkdownPostProcessor(this.remover);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG52YXIgdGl0bGUgPSAve1xccysoLio/KVxccyt9LztcbmNvbnN0IHRhZyA9ICdcdUQ4M0NcdURGRjdcdUZFMEYnO1xuY29uc3QgY2xvY2sgPSAnXHVEODNEXHVERDVCJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVzdGFjaGVSZW1vdmVyIGV4dGVuZHMgUGx1Z2luIHtcbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IodGhpcy5yZW1vdmVyKTtcbiAgfVxuXG4gIHJlbW92ZXIgPSBhc3luYyAoZWxlbWVudCwgY29udGV4dCkgPT4ge1xuICAgIGF3YWl0IHRoaXMuaGVhZGVyX3JlbW92ZXIoZWxlbWVudCwgY29udGV4dCk7XG4gICAgYXdhaXQgdGhpcy5tdXN0YWNoZV9yZW1vdmVyKGVsZW1lbnQsIGNvbnRleHQpO1xuICAgIGF3YWl0IHRoaXMuY3VybF9hZGRlcihlbGVtZW50LCBjb250ZXh0KTtcbiAgfVxuXG4gIGhlYWRlcl9yZW1vdmVyID0gYXN5bmMgKGVsZW1lbnQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBpc19keW5iZWRkZWQgPSBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImR5bmJlZGRlZFwiKTtcbiAgICB2YXIgaXNfZW1iZWRkZWQgPSBmYWxzZTtcbiAgICBpZiAoIWlzX2R5bmJlZGRlZCkge1xuICAgICAgdmFyIHBhcmVudCA9IGNvbnRleHQuY29udGFpbmVyRWw7XG4gICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGNvbnN0IGNsYXNzX2xpc3QgPSBwYXJlbnQuY2xhc3NMaXN0O1xuICAgICAgICBpZiAoIWlzX2VtYmVkZGVkICYmIGNsYXNzX2xpc3QuY29udGFpbnMoXCJtYXJrZG93bi1lbWJlZFwiKSkge1xuICAgICAgICAgIGlzX2VtYmVkZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNfZW1iZWRkZWQgJiYgY2xhc3NfbGlzdC5jb250YWlucyhcInBvcG92ZXJcIikpIHtcbiAgICAgICAgICBpZiAoY2xhc3NfbGlzdC5jb250YWlucyhcImhvdmVyLXBvcG92ZXJcIikpIHtcbiAgICAgICAgICAgIGlzX2VtYmVkZGVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNfZHluYmVkZGVkIHx8IGlzX2VtYmVkZGVkKSB7XG4gICAgICBjb25zdCBwYXJhZ3JhcGhzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZGl2IHBcIik7XG4gICAgICBpZiAocGFyYWdyYXBocy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoID0gcGFyYWdyYXBoc1swXTtcbiAgICAgICAgY29uc3QgdGV4dCA9IHBhcmFncmFwaC5pbm5lclRleHQ7XG4gICAgICAgIGlmICh0ZXh0LmNvbnRhaW5zKHRhZykpIHtcbiAgICAgICAgICBjb25zdCBiciA9IHBhcmFncmFwaC5xdWVyeVNlbGVjdG9yQWxsKFwiYnJcIik7XG4gICAgICAgICAgY29uc3Qgd2JyID0gcGFyYWdyYXBoLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ3YnJcIik7XG4gICAgICAgICAgaWYgKGJyLmxlbmd0aCAmJiB3YnIubGVuZ3RoICYmIHRleHQuY29udGFpbnMoY2xvY2spKSB7XG4gICAgICAgICAgICBwYXJhZ3JhcGgucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGN1cmxfYWRkZXIgPSBhc3luYyAoZWxlbWVudCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHdicnMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ3YnJcIik7XG4gICAgZm9yIChjb25zdCB3YnIgb2Ygd2Jycykge1xuICAgICAgZm9yIChjb25zdCBjbHMgb2Ygd2JyLmNsYXNzTGlzdCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtdXN0YWNoZV9yZW1vdmVyID0gYXN5bmMgKGVsZW1lbnQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBhbmNob3JzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKTtcbiAgICBmb3IgKGNvbnN0IGFuY2hvciBvZiBhbmNob3JzKSB7XG4gICAgICBpZiAoYW5jaG9yLmNsYXNzTGlzdC5jb250YWlucyhcImludGVybmFsLWxpbmtcIikpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGFuY2hvci5pbm5lclRleHQ7XG4gICAgICAgIGlmICh0ZXh0ID09IGFuY2hvci5pbm5lckhUTUwpIHtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IHRleHQubWF0Y2godGl0bGUpO1xuICAgICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBhbmNob3IuaW5uZXJUZXh0ID0gbWF0Y2hbMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXVCO0FBRXZCLElBQUksUUFBUTtBQUNaLElBQU0sTUFBTTtBQUNaLElBQU0sUUFBUTtBQUVkLElBQXFCLGtCQUFyQixjQUE2Qyx1QkFBTztBQUFBLEVBQXBEO0FBQUE7QUFLRSxtQkFBVSxPQUFPLFNBQVMsWUFBWTtBQUNwQyxZQUFNLEtBQUssZUFBZSxTQUFTLE9BQU87QUFDMUMsWUFBTSxLQUFLLGlCQUFpQixTQUFTLE9BQU87QUFDNUMsWUFBTSxLQUFLLFdBQVcsU0FBUyxPQUFPO0FBQUEsSUFDeEM7QUFFQSwwQkFBaUIsT0FBTyxTQUFTLFlBQVk7QUFDM0MsWUFBTSxlQUFlLFFBQVEsVUFBVSxTQUFTLFdBQVc7QUFDM0QsVUFBSSxjQUFjO0FBQ2xCLFVBQUksQ0FBQyxjQUFjO0FBQ2pCLFlBQUksU0FBUyxRQUFRO0FBQ3JCLGVBQU8sUUFBUTtBQUNiLGdCQUFNLGFBQWEsT0FBTztBQUMxQixjQUFJLENBQUMsZUFBZSxXQUFXLFNBQVMsZ0JBQWdCLEdBQUc7QUFDekQsMEJBQWM7QUFBQSxVQUNoQjtBQUNBLGNBQUksZUFBZSxXQUFXLFNBQVMsU0FBUyxHQUFHO0FBQ2pELGdCQUFJLFdBQVcsU0FBUyxlQUFlLEdBQUc7QUFDeEMsNEJBQWM7QUFBQSxZQUNoQjtBQUFBLFVBQ0Y7QUFDQSxtQkFBUyxPQUFPO0FBQUEsUUFDbEI7QUFBQSxNQUNGO0FBQ0EsVUFBSSxnQkFBZ0IsYUFBYTtBQUMvQixjQUFNLGFBQWEsUUFBUSxpQkFBaUIsT0FBTztBQUNuRCxZQUFJLFdBQVcsUUFBUTtBQUNyQixnQkFBTSxZQUFZLFdBQVcsQ0FBQztBQUM5QixnQkFBTSxPQUFPLFVBQVU7QUFDdkIsY0FBSSxLQUFLLFNBQVMsR0FBRyxHQUFHO0FBQ3RCLGtCQUFNLEtBQUssVUFBVSxpQkFBaUIsSUFBSTtBQUMxQyxrQkFBTSxNQUFNLFVBQVUsaUJBQWlCLEtBQUs7QUFDNUMsZ0JBQUksR0FBRyxVQUFVLElBQUksVUFBVSxLQUFLLFNBQVMsS0FBSyxHQUFHO0FBQ25ELHdCQUFVLE9BQU87QUFBQSxZQUNuQjtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFDQSxzQkFBYSxPQUFPLFNBQVMsWUFBWTtBQUN2QyxZQUFNLE9BQU8sUUFBUSxpQkFBaUIsS0FBSztBQUMzQyxpQkFBVyxPQUFPLE1BQU07QUFDdEIsbUJBQVcsT0FBTyxJQUFJLFdBQVc7QUFDL0Isa0JBQVEsVUFBVSxJQUFJLEdBQUc7QUFBQSxRQUMzQjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBRUEsNEJBQW1CLE9BQU8sU0FBUyxZQUFZO0FBQzdDLFlBQU0sVUFBVSxRQUFRLGlCQUFpQixHQUFHO0FBQzVDLGlCQUFXLFVBQVUsU0FBUztBQUM1QixZQUFJLE9BQU8sVUFBVSxTQUFTLGVBQWUsR0FBRztBQUM5QyxnQkFBTSxPQUFPLE9BQU87QUFDcEIsY0FBSSxRQUFRLE9BQU8sV0FBVztBQUM1QixrQkFBTSxRQUFRLEtBQUssTUFBTSxLQUFLO0FBQzlCLGdCQUFJLFNBQVMsTUFBTSxTQUFTLEdBQUc7QUFDN0IscUJBQU8sWUFBWSxNQUFNLENBQUM7QUFBQSxZQUM1QjtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQTtBQUFBLEVBakVBLE1BQU0sU0FBUztBQUNiLFNBQUssOEJBQThCLEtBQUssT0FBTztBQUFBLEVBQ2pEO0FBZ0VGOyIsCiAgIm5hbWVzIjogW10KfQo=
