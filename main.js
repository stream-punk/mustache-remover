/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MustacheRemover
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var title = /{\s+(.*?)\s+}/;
var tag = "\u{1F3F7}\uFE0F";
var clock = "\u{1F55B}";
var MustacheRemover = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.remover = async (element, context) => {
      await this.header_remover(element, context);
      await this.mustache_remover(element, context);
    };
    this.header_remover = async (element, context) => {
      const is_dynbedded = element.classList.contains("dynbedded");
      var is_embedded = false;
      if (!is_dynbedded) {
        var parent = context.containerEl;
        while (parent) {
          const class_list = parent.classList;
          if (!is_embedded && class_list.contains("markdown-embed")) {
            is_embedded = true;
          }
          if (is_embedded && class_list.contains("popover")) {
            if (class_list.contains("hover-popover")) {
              is_embedded = false;
            }
          }
          parent = parent.parentElement;
        }
      }
      if (is_dynbedded || is_embedded) {
        const paragraphs = element.querySelectorAll("div p");
        if (paragraphs.length) {
          const paragraph = paragraphs[0];
          const text = paragraph.innerText;
          if (text.contains(tag)) {
            const br = paragraph.querySelectorAll("br");
            const wbr = paragraph.querySelectorAll("wbr");
            if (br.length && wbr.length && text.contains(clock)) {
              paragraph.remove();
            }
          }
        }
      }
    };
    this.mustache_remover = async (element, context) => {
      const anchors = element.querySelectorAll("a");
      for (const anchor of anchors) {
        if (anchor.classList.contains("internal-link")) {
          const text = anchor.innerText;
          if (text == anchor.innerHTML) {
            const match = text.match(title);
            if (match && match.length > 1) {
              anchor.innerText = match[1];
            }
          }
        }
      }
    };
  }
  async onload() {
    this.registerMarkdownPostProcessor(this.remover);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG52YXIgdGl0bGUgPSAve1xccysoLio/KVxccyt9LztcbmNvbnN0IHRhZyA9ICdcdUQ4M0NcdURGRjdcdUZFMEYnO1xuY29uc3QgY2xvY2sgPSAnXHVEODNEXHVERDVCJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVzdGFjaGVSZW1vdmVyIGV4dGVuZHMgUGx1Z2luIHtcbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IodGhpcy5yZW1vdmVyKTtcbiAgfVxuXG4gIHJlbW92ZXIgPSBhc3luYyAoZWxlbWVudCwgY29udGV4dCkgPT4ge1xuICAgIGF3YWl0IHRoaXMuaGVhZGVyX3JlbW92ZXIoZWxlbWVudCwgY29udGV4dCk7XG4gICAgYXdhaXQgdGhpcy5tdXN0YWNoZV9yZW1vdmVyKGVsZW1lbnQsIGNvbnRleHQpO1xuICB9XG5cbiAgaGVhZGVyX3JlbW92ZXIgPSBhc3luYyAoZWxlbWVudCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGlzX2R5bmJlZGRlZCA9IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHluYmVkZGVkXCIpO1xuICAgIHZhciBpc19lbWJlZGRlZCA9IGZhbHNlO1xuICAgIGlmICghaXNfZHluYmVkZGVkKSB7XG4gICAgICB2YXIgcGFyZW50ID0gY29udGV4dC5jb250YWluZXJFbDtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgY29uc3QgY2xhc3NfbGlzdCA9IHBhcmVudC5jbGFzc0xpc3Q7XG4gICAgICAgIGlmICghaXNfZW1iZWRkZWQgJiYgY2xhc3NfbGlzdC5jb250YWlucyhcIm1hcmtkb3duLWVtYmVkXCIpKSB7XG4gICAgICAgICAgaXNfZW1iZWRkZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc19lbWJlZGRlZCAmJiBjbGFzc19saXN0LmNvbnRhaW5zKFwicG9wb3ZlclwiKSkge1xuICAgICAgICAgIGlmIChjbGFzc19saXN0LmNvbnRhaW5zKFwiaG92ZXItcG9wb3ZlclwiKSkge1xuICAgICAgICAgICAgaXNfZW1iZWRkZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc19keW5iZWRkZWQgfHwgaXNfZW1iZWRkZWQpIHtcbiAgICAgIGNvbnN0IHBhcmFncmFwaHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJkaXYgcFwiKTtcbiAgICAgIGlmIChwYXJhZ3JhcGhzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBwYXJhZ3JhcGggPSBwYXJhZ3JhcGhzWzBdO1xuICAgICAgICBjb25zdCB0ZXh0ID0gcGFyYWdyYXBoLmlubmVyVGV4dDtcbiAgICAgICAgaWYgKHRleHQuY29udGFpbnModGFnKSkge1xuICAgICAgICAgIGNvbnN0IGJyID0gcGFyYWdyYXBoLnF1ZXJ5U2VsZWN0b3JBbGwoXCJiclwiKTtcbiAgICAgICAgICBjb25zdCB3YnIgPSBwYXJhZ3JhcGgucXVlcnlTZWxlY3RvckFsbChcIndiclwiKTtcbiAgICAgICAgICBpZiAoYnIubGVuZ3RoICYmIHdici5sZW5ndGggJiYgdGV4dC5jb250YWlucyhjbG9jaykpIHtcbiAgICAgICAgICAgIHBhcmFncmFwaC5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtdXN0YWNoZV9yZW1vdmVyID0gYXN5bmMgKGVsZW1lbnQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBhbmNob3JzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKTtcbiAgICBmb3IgKGNvbnN0IGFuY2hvciBvZiBhbmNob3JzKSB7XG4gICAgICBpZiAoYW5jaG9yLmNsYXNzTGlzdC5jb250YWlucyhcImludGVybmFsLWxpbmtcIikpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGFuY2hvci5pbm5lclRleHQ7XG4gICAgICAgIGlmICh0ZXh0ID09IGFuY2hvci5pbm5lckhUTUwpIHtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IHRleHQubWF0Y2godGl0bGUpO1xuICAgICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBhbmNob3IuaW5uZXJUZXh0ID0gbWF0Y2hbMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXVCO0FBRXZCLElBQUksUUFBUTtBQUNaLElBQU0sTUFBTTtBQUNaLElBQU0sUUFBUTtBQUVkLElBQXFCLGtCQUFyQixjQUE2Qyx1QkFBTztBQUFBLEVBQXBEO0FBQUE7QUFLRSxtQkFBVSxPQUFPLFNBQVMsWUFBWTtBQUNwQyxZQUFNLEtBQUssZUFBZSxTQUFTLE9BQU87QUFDMUMsWUFBTSxLQUFLLGlCQUFpQixTQUFTLE9BQU87QUFBQSxJQUM5QztBQUVBLDBCQUFpQixPQUFPLFNBQVMsWUFBWTtBQUMzQyxZQUFNLGVBQWUsUUFBUSxVQUFVLFNBQVMsV0FBVztBQUMzRCxVQUFJLGNBQWM7QUFDbEIsVUFBSSxDQUFDLGNBQWM7QUFDakIsWUFBSSxTQUFTLFFBQVE7QUFDckIsZUFBTyxRQUFRO0FBQ2IsZ0JBQU0sYUFBYSxPQUFPO0FBQzFCLGNBQUksQ0FBQyxlQUFlLFdBQVcsU0FBUyxnQkFBZ0IsR0FBRztBQUN6RCwwQkFBYztBQUFBLFVBQ2hCO0FBQ0EsY0FBSSxlQUFlLFdBQVcsU0FBUyxTQUFTLEdBQUc7QUFDakQsZ0JBQUksV0FBVyxTQUFTLGVBQWUsR0FBRztBQUN4Qyw0QkFBYztBQUFBLFlBQ2hCO0FBQUEsVUFDRjtBQUNBLG1CQUFTLE9BQU87QUFBQSxRQUNsQjtBQUFBLE1BQ0Y7QUFDQSxVQUFJLGdCQUFnQixhQUFhO0FBQy9CLGNBQU0sYUFBYSxRQUFRLGlCQUFpQixPQUFPO0FBQ25ELFlBQUksV0FBVyxRQUFRO0FBQ3JCLGdCQUFNLFlBQVksV0FBVyxDQUFDO0FBQzlCLGdCQUFNLE9BQU8sVUFBVTtBQUN2QixjQUFJLEtBQUssU0FBUyxHQUFHLEdBQUc7QUFDdEIsa0JBQU0sS0FBSyxVQUFVLGlCQUFpQixJQUFJO0FBQzFDLGtCQUFNLE1BQU0sVUFBVSxpQkFBaUIsS0FBSztBQUM1QyxnQkFBSSxHQUFHLFVBQVUsSUFBSSxVQUFVLEtBQUssU0FBUyxLQUFLLEdBQUc7QUFDbkQsd0JBQVUsT0FBTztBQUFBLFlBQ25CO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUVBLDRCQUFtQixPQUFPLFNBQVMsWUFBWTtBQUM3QyxZQUFNLFVBQVUsUUFBUSxpQkFBaUIsR0FBRztBQUM1QyxpQkFBVyxVQUFVLFNBQVM7QUFDNUIsWUFBSSxPQUFPLFVBQVUsU0FBUyxlQUFlLEdBQUc7QUFDOUMsZ0JBQU0sT0FBTyxPQUFPO0FBQ3BCLGNBQUksUUFBUSxPQUFPLFdBQVc7QUFDNUIsa0JBQU0sUUFBUSxLQUFLLE1BQU0sS0FBSztBQUM5QixnQkFBSSxTQUFTLE1BQU0sU0FBUyxHQUFHO0FBQzdCLHFCQUFPLFlBQVksTUFBTSxDQUFDO0FBQUEsWUFDNUI7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUE7QUFBQSxFQXhEQSxNQUFNLFNBQVM7QUFDYixTQUFLLDhCQUE4QixLQUFLLE9BQU87QUFBQSxFQUNqRDtBQXVERjsiLAogICJuYW1lcyI6IFtdCn0K
