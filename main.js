/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MustacheRemover
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var tag = /{\s+(.*?)\s+}/;
var MustacheRemover = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownPostProcessor((element, context) => {
      const anchors = element.querySelectorAll("a");
      for (const anchor of anchors) {
        if (anchor.classList.contains("internal-link")) {
          const text = anchor.innerText;
          if (text == anchor.innerHTML) {
            const match = text.match(tag);
            if (match && match.length > 1) {
              anchor.innerText = match[1];
            }
          }
        }
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG52YXIgdGFnID0gL3tcXHMrKC4qPylcXHMrfS87XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE11c3RhY2hlUmVtb3ZlciBleHRlbmRzIFBsdWdpbiB7XG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKChlbGVtZW50LCBjb250ZXh0KSA9PiB7XG5cdFx0XHRjb25zdCBhbmNob3JzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKTtcblx0XHRcdGZvciAoY29uc3QgYW5jaG9yIG9mIGFuY2hvcnMpIHtcblx0XHRcdFx0aWYgKGFuY2hvci5jbGFzc0xpc3QuY29udGFpbnMoXCJpbnRlcm5hbC1saW5rXCIpKSB7XG5cdFx0XHRcdFx0Y29uc3QgdGV4dCA9IGFuY2hvci5pbm5lclRleHQ7XG5cdFx0XHRcdFx0aWYgKHRleHQgPT0gYW5jaG9yLmlubmVySFRNTCkge1xuXHRcdFx0XHRcdCAgY29uc3QgbWF0Y2ggPSB0ZXh0Lm1hdGNoKHRhZyk7XG5cdFx0XHRcdFx0ICBpZiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdCAgXHRhbmNob3IuaW5uZXJUZXh0ID0gbWF0Y2hbMV07XG5cdFx0XHRcdFx0ICB9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBdUI7QUFFdkIsSUFBSSxNQUFNO0FBRVYsSUFBcUIsa0JBQXJCLGNBQTZDLHVCQUFPO0FBQUEsRUFDbkQsTUFBTSxTQUFTO0FBQ2QsU0FBSyw4QkFBOEIsQ0FBQyxTQUFTLFlBQVk7QUFDeEQsWUFBTSxVQUFVLFFBQVEsaUJBQWlCLEdBQUc7QUFDNUMsaUJBQVcsVUFBVSxTQUFTO0FBQzdCLFlBQUksT0FBTyxVQUFVLFNBQVMsZUFBZSxHQUFHO0FBQy9DLGdCQUFNLE9BQU8sT0FBTztBQUNwQixjQUFJLFFBQVEsT0FBTyxXQUFXO0FBQzVCLGtCQUFNLFFBQVEsS0FBSyxNQUFNLEdBQUc7QUFDNUIsZ0JBQUksU0FBUyxNQUFNLFNBQVMsR0FBRztBQUM5QixxQkFBTyxZQUFZLE1BQU0sQ0FBQztBQUFBLFlBQzNCO0FBQUEsVUFDRjtBQUFBLFFBQ0Q7QUFBQSxNQUNEO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
