/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var tag = /{\s+(.*?)\s+}/;
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownPostProcessor((element, context) => {
      const anchors = element.querySelectorAll("a");
      for (const anchor of anchors) {
        if (anchor.classList.contains("internal-link")) {
          const text = anchor.innerText;
          if (text == anchor.innerHTML) {
            const match = text.match(tag);
            if (match && match.length > 1) {
              anchor.innerText = match[1];
            }
          }
        }
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG52YXIgdGFnID0gL3tcXHMrKC4qPylcXHMrfS87XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoKGVsZW1lbnQsIGNvbnRleHQpID0+IHtcblx0XHRcdGNvbnN0IGFuY2hvcnMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhXCIpO1xuXHRcdFx0Zm9yIChjb25zdCBhbmNob3Igb2YgYW5jaG9ycykge1xuXHRcdFx0XHRpZiAoYW5jaG9yLmNsYXNzTGlzdC5jb250YWlucyhcImludGVybmFsLWxpbmtcIikpIHtcblx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gYW5jaG9yLmlubmVyVGV4dDtcblx0XHRcdFx0XHRpZiAodGV4dCA9PSBhbmNob3IuaW5uZXJIVE1MKSB7XG5cdFx0XHRcdFx0ICBjb25zdCBtYXRjaCA9IHRleHQubWF0Y2godGFnKTtcblx0XHRcdFx0XHQgIGlmIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0ICBcdGFuY2hvci5pbm5lclRleHQgPSBtYXRjaFsxXTtcblx0XHRcdFx0XHQgIH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF1QjtBQUV2QixJQUFJLE1BQU07QUFFVixJQUFxQixXQUFyQixjQUFzQyx1QkFBTztBQUFBLEVBQzVDLE1BQU0sU0FBUztBQUNkLFNBQUssOEJBQThCLENBQUMsU0FBUyxZQUFZO0FBQ3hELFlBQU0sVUFBVSxRQUFRLGlCQUFpQixHQUFHO0FBQzVDLGlCQUFXLFVBQVUsU0FBUztBQUM3QixZQUFJLE9BQU8sVUFBVSxTQUFTLGVBQWUsR0FBRztBQUMvQyxnQkFBTSxPQUFPLE9BQU87QUFDcEIsY0FBSSxRQUFRLE9BQU8sV0FBVztBQUM1QixrQkFBTSxRQUFRLEtBQUssTUFBTSxHQUFHO0FBQzVCLGdCQUFJLFNBQVMsTUFBTSxTQUFTLEdBQUc7QUFDOUIscUJBQU8sWUFBWSxNQUFNLENBQUM7QUFBQSxZQUMzQjtBQUFBLFVBQ0Y7QUFBQSxRQUNEO0FBQUEsTUFDRDtBQUFBLElBQ0QsQ0FBQztBQUFBLEVBQ0Y7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
